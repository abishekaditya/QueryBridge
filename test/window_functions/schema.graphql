type Department {
  id: ID!
  name: String!
}

type Employee {
  id: ID!
  name: String!
  salary: Float!
  departmentId: ID!
  department: Department!
  hireDate: String!
}

type EmployeeWithRank {
  id: ID!
  name: String!
  salary: Float!
  department: Department!
  rank: Int!
  runningTotal: Float!
  departmentAverage: Float!
  overallAverage: Float!
  percentile: Float!
}

type Query {
  # Get employees with their ranks based on salary
  topEmployeesBySalary(limit: Int!): [EmployeeWithRank!]!
  
  # Get employees with their department-relative metrics
  departmentSalaryAnalysis(departmentId: ID!): [EmployeeWithRank!]!
}